name: Building BoringtunJS

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Building BoringtunJS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          #          - os: ubuntu-20.04
          #            process_platform: "linux"
          #            process_arch: "x64"
          - os: macos-14
            process_platform: "darwin"
            process_arch: "arm64"
        node:
          - 20
          #              - os: macos-latest  # todo
          #                build-script: "npm run build:mac_intel"
          #              - os: windows-latest # todo
          #                build-script: "npm run build:win"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true

      - name: Build Boringtun
        run: npm run build:boringtun

      - name: Install NodeJS Dependencies
        run: npm install

      - name: Build # maybe delete this.
        run: npm run build

      - name: Compress the boring.node file
        run: tar -czvf boringtunjs.tar.gz ./build/boringtunjs.node

#    todo: for windows
#      - name: Compress the boring.node file (Windows)
#        shell: powershell
#        run: |
#              Compress-Archive -Path path\to\boring.node -DestinationPath boringtunjs.zip
#              Rename-Item -Path boringtunjs.zip -NewName boringtunjs.tar.gz

      - name: Extract TAG Name
        run: echo "::set-output name=tag::$(echo ${GITHUB_REF#refs/tags/})"

      - name: Archive Production Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: boringtunjs-${{steps.extract_tag.outputs.tag}}-${{ matrix.node }}-${{ matrix.process_platform }}-${{ matrix.process_arch }}
          path: boringtunjs.tar.gz

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  upload-assets:
    needs: [ build, create-release ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          path: artifacts/

      - name: Upload artifact to release
        uses: actions/upload-artifact@v2

